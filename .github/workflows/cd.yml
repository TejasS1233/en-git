name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main, develop]

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '18'

jobs:
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event.workflow_run.conclusion == 'success'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Staging
        run: |
          echo "Deploying to Vercel staging environment..."
          cd client
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_SCOPE" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "$VERCEL_ORG_ID" ]; then
            echo " Missing required Vercel secrets. Please configure:"
            echo "   - VERCEL_TOKEN"
            echo "   - VERCEL_SCOPE" 
            echo "   - VERCEL_PROJECT_ID"
            echo "   - VERCEL_ORG_ID"
            echo "See: https://github.com/your-repo/VERCEL_DEPLOYMENT_SETUP.md"
            exit 1
          fi
          vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }} --env=staging --prod=false
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy Server to Vercel Staging
        run: |
          echo "Deploying server to Vercel staging..."
          cd server
          vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }} --env=staging --prod=false
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_SERVER_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add your smoke test commands here
          # Example: curl tests, API health checks, etc.

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Production
        run: |
          echo "Deploying to Vercel production environment..."
          cd client
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_SCOPE" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "$VERCEL_ORG_ID" ]; then
            echo " Missing required Vercel secrets. Please configure:"
            echo "   - VERCEL_TOKEN"
            echo "   - VERCEL_SCOPE" 
            echo "   - VERCEL_PROJECT_ID"
            echo "   - VERCEL_ORG_ID"
            echo "See: https://github.com/your-repo/VERCEL_DEPLOYMENT_SETUP.md"
            exit 1
          fi
          vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }} --prod
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy Server to Vercel Production
        run: |
          echo "Deploying server to Vercel production..."
          cd server
          vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }} --prod
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_SERVER_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run Post-Deployment Tests
        run: |
          echo "Running post-deployment tests..."
          # Add your post-deployment test commands here
          # Example: curl tests, API health checks, etc.

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}